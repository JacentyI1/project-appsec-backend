stages: 
  - build-webapp
    # just run a docker compose file that will pull image created in previous step
    # file will contain base application and database and put them in th same network 
  - dockerize-webapp
    # this step will asure to have image prepered before pushing it to docker hub
  - push-to-dockerhub
    #create env for building app without running it, 
    #writing a dockerfile and posting finished image for dockerhub
    #how to login to dockerhub and then post image
  - deploy-on-server

  - tests
    # write tests that will allow to determine if features work, 
    #using curl or postman get xml file to send requests to appliacation
    #to-docker-hub:
build-webapp:
  stage: build-webapp
  image: maven:3.9.6-amazoncorretto-21-debian
  before_script:
    - apt update -y
    - apt upgrade -y
    - java --version
    - mvn -v
  script:
    - mvn clean package
  artifacts:
    paths:
      - target
dockerize-webapp:
  stage: dockerize-webapp
  image: docker:latest
    # running docker image as an image on your gitlab runner requires two things
    # 1. in runner configuration you need allow runner to be privelaged (more in gitlab docs)
    # 2. in services you need to define docker:dind wich stands for Docker Inside Docker 
    # example bellow \/
  services:
    - docker:dind
  dependencies:
    - build-webapp
  before_script:
    - docker --version
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    
push-to-dockerhub:
  image: docker:latest
  stage: push-to-dockerhub
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" 
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"

deploy-on-server:
  image: docker:latest
  stage: deploy-on-server
  services:
    - docker:dind
  before_script:
    - docker-compose --version
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" 
    - docker pull pepe991/webapp:latest
    - docker images
  script:
    - docker-compose up -d
    - mkdir logs/
    - sleep 2m
    - docker container logs webapp-db-1 >> logs/db.txt
    - docker container logs webapp-app-1 >> logs/app.txt
    - cat logs/app.txt
  artifacts:
    paths:
      - logs
  only:
    - master 

