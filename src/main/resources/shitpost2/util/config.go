package util

import (
    "errors"
    "log/slog"
    "os"
    "path"
    "encoding/json"
    "strings"
    "github.com/adrg/xdg"
    "github.com/emvi/iso-639-1"
)

const CONFIG_FILENAME string = "config.json"

type Config struct {
    // Access token for bot account. Generated during registration.
    // Required.
    BotToken string

    // CLIENT_ID for bot. Generated during registration.
    // Required.
    BotClientId string

    // CLIENT_SECRET for bot. Generated during registration.
    // Required.
    BotClientSecret string

    // Bot handle. I.e. `@wilmbooks@awawa.cat`.
    // Required.
    BotUserHandle string

    // Tracked user handle. I.e. `@wilmhit@awawa.cat`.
    // Required.
    TrackedUserHandle string

    // How many minutes to wait before every post.
    // Defaults to 120.
    PostEveryMinute int

    // How many seconds to wait before polling for new tracked user posts.
    // Defaults to 60.
    PollEverySec int

    // Content warning for all posts generated by the bot. Empty means no warning.
    // Defaults to empty.
    ContentWarning string

    // Whenever all bot's posts should be marked as sensitive.
    // Defaults to false.
    MarkAsSensitive bool

    // This should be one of: MESSAGE, PRIVATE, UNLISTED, PUBLIC.
    // This will decide if some of the posts are used to train the model.
    // Defaults to PUBLIC.
    ReadLevel string

    // A post language for all bot's posts.
    // Defaults to "en"
    Language string

    // A location to save state. This is only filename. Not full path.
    // Defaults to "state.markov"
    StateName string

    // Set this to true is you don't want to connect to internet.
    // Defaults to false
    DryRun bool

    // http or https. Protocol used for all of communication.
    // Defaults to https
    AccessProtocol string
}

func Defaults() Config {
    return Config {
        BotToken: "",
        BotClientId: "",
        BotClientSecret: "",
        BotUserHandle: "",
        TrackedUserHandle: "",
        PostEveryMinute: 120,
        PollEverySec: 60,
        ContentWarning: "",
        MarkAsSensitive: false,
        ReadLevel: "PUBLIC",
        StateName: "state.markov",
        Language: "en",
        DryRun: false,
        AccessProtocol: "https",
    }
}

func checkToken(token string) bool{
    // It should be 43 chars
    if len(token) < 40 {
        return false
    }
    return len(token) < 45 
}

func (c *Config) GetError() error {
    if !checkToken(c.BotToken) && !c.DryRun {
        return errors.New("BotToken doesn't look correct.")
    }
    if !checkToken(c.BotClientId) && !c.DryRun {
        return errors.New("BotClientId doesn't look correct.")
    }
    if !checkToken(c.BotClientSecret) && !c.DryRun {
        return errors.New("BotClientSecret doesn't look correct.")
    }
    if isHandleOk(c.BotUserHandle) {
        return errors.New("Bot handle doesn't look like correct handle.")
    }
    if isHandleOk(c.TrackedUserHandle) {
        return errors.New("Tracked user handle handle doesn't look like correct handle.")
    }
    if c.PostEveryMinute > 1860 { // One month
        return errors.New("You cannot post that rarely. The unit is minute not seconds.")
    }
    if c.PollEverySec > 2678400 { // Also one month
        return errors.New("You cannot poll that rarely.")
    }

    switch c.ReadLevel {
    case "PUBLIC", "UNLISTED", "PRIVATE", "MESSAGE":
    default:
        return errors.New("ReadLevel is not one of [PUBLIC UNLISTED PRIVATE MESSAGE]")
    }

    switch c.AccessProtocol {
    case "http", "https":
    default:
        return errors.New("AccessProtocol must be either http or https")
    }

    _ = iso6391.FromCode(c.Language)

    return nil
}

func (c *Config) StateLocation() string {
    return getLocation(c.StateName)
}

func LoadConfig() Config {
    configPath := getLocation(CONFIG_FILENAME)
    file, err := os.ReadFile(configPath)
    if err != nil {
        slog.Warn(err.Error())
        slog.Warn(
            "No config was found." +
            " A default one will be created." +
            " You probably want to edit this config at",
        )
        createDefaultsFile(configPath)
        return Defaults()
    }

    var config Config = Defaults()
    err = json.Unmarshal(file, &config)
    if err != nil {
        slog.Error("Found config file but could not open.")
        panic(err.Error())
    }

    return config
}

func createDefaultsFile(configPath string) error {
    marshalled, err := json.MarshalIndent(Defaults(), "", "  ")

    if err != nil {
        slog.Error(err.Error())
        panic("Could not serialize the defaults")
    }

    f, err := os.Create(configPath)
    defer f.Close()
    if err != nil {
        slog.Error("Could not create a file!")
        return err
    }

    _, err = f.Write(marshalled)
    return err
}

func getLocation(filename string) string {
    if envPath := os.Getenv("EBOOKS_CONFIG_PATH"); envPath != "" {
        return path.Join(envPath, filename)
    } 

    filename = path.Join("ebooks", filename)
    xdgPath, err := xdg.ConfigFile(filename)
    if err != nil {
        panic(err)
    }
    return xdgPath
}

func isHandleOk(handle string) bool {
    parts := strings.Split(handle, "@")
    return len(parts) == 2 &&
        len(parts[0]) == 0 &&
        len(parts[1]) != 0
}
